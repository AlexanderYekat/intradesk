/*
Settings API

Testing ClientsLegalEntitiesUsersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ClientsLegalEntitiesUsersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersBlockEmailIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersBlockEmailIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersDeleteIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersDeleteIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersMergePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersMergePut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersPatch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersRestoreIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersRestoreIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersRoleHintsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersRoleHintsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersSearchHintsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersSearchHintsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersToEmployeePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersToEmployeePut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersUnblockEmailIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersUnblockEmailIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesUsersApiService ApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesUsersApi.ApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
