/*
Settings API

Testing ClientsPhysicalPersonsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ClientsPhysicalPersonsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsBlockEmailUseridPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userid int64

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsBlockEmailUseridPut(context.Background(), userid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsDeleteIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsDeleteIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsDeleteUserUseridPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userid int64

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsDeleteUserUseridPut(context.Background(), userid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsManagersDictionaryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsManagersDictionaryGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsPatch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsRestoreIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsRestoreIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsRestoreUserUseridPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userid int64

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsRestoreUserUseridPut(context.Background(), userid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsToLegalEntityIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsToLegalEntityIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsPhysicalPersonsApiService ApiV4ClientsPhysicalPersonsUnblockEmailUseridPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userid int64

		resp, httpRes, err := apiClient.ClientsPhysicalPersonsApi.ApiV4ClientsPhysicalPersonsUnblockEmailUseridPut(context.Background(), userid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
