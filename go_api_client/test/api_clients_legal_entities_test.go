/*
Settings API

Testing ClientsLegalEntitiesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ClientsLegalEntitiesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesDeleteIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesDeleteIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesGroupsDictionaryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesGroupsDictionaryGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesImportCheckPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesImportCheckPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesImportPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesImportPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesManagersDictionaryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesManagersDictionaryGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesPatch(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesRestoreIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesRestoreIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesSearchHintsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesSearchHintsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientsLegalEntitiesApiService ApiV4ClientsLegalEntitiesToPhysicalPersonIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ClientsLegalEntitiesApi.ApiV4ClientsLegalEntitiesToPhysicalPersonIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
