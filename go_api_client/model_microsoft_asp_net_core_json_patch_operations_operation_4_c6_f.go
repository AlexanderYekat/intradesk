/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F{}

// MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F struct for MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F
type MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F struct {
	OperationType *MicrosoftAspNetCoreJsonPatchOperationsOperationType378D `json:"operationType,omitempty"`
	Path NullableString `json:"path,omitempty"`
	Op NullableString `json:"op,omitempty"`
	From NullableString `json:"from,omitempty"`
	Value interface{} `json:"value,omitempty"`
}

// NewMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F instantiates a new MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F() *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F {
	this := MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F{}
	return &this
}

// NewMicrosoftAspNetCoreJsonPatchOperationsOperation4C6FWithDefaults instantiates a new MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftAspNetCoreJsonPatchOperationsOperation4C6FWithDefaults() *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F {
	this := MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F{}
	return &this
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetOperationType() MicrosoftAspNetCoreJsonPatchOperationsOperationType378D {
	if o == nil || IsNil(o.OperationType) {
		var ret MicrosoftAspNetCoreJsonPatchOperationsOperationType378D
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetOperationTypeOk() (*MicrosoftAspNetCoreJsonPatchOperationsOperationType378D, bool) {
	if o == nil || IsNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) HasOperationType() bool {
	if o != nil && !IsNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given MicrosoftAspNetCoreJsonPatchOperationsOperationType378D and assigns it to the OperationType field.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) SetOperationType(v MicrosoftAspNetCoreJsonPatchOperationsOperationType378D) {
	o.OperationType = &v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) UnsetPath() {
	o.Path.Unset()
}

// GetOp returns the Op field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetOp() string {
	if o == nil || IsNil(o.Op.Get()) {
		var ret string
		return ret
	}
	return *o.Op.Get()
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Op.Get(), o.Op.IsSet()
}

// HasOp returns a boolean if a field has been set.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) HasOp() bool {
	if o != nil && o.Op.IsSet() {
		return true
	}

	return false
}

// SetOp gets a reference to the given NullableString and assigns it to the Op field.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) SetOp(v string) {
	o.Op.Set(&v)
}
// SetOpNil sets the value for Op to be an explicit nil
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) SetOpNil() {
	o.Op.Set(nil)
}

// UnsetOp ensures that no value is present for Op, not even an explicit nil
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) UnsetOp() {
	o.Op.Unset()
}

// GetFrom returns the From field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetFrom() string {
	if o == nil || IsNil(o.From.Get()) {
		var ret string
		return ret
	}
	return *o.From.Get()
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.From.Get(), o.From.IsSet()
}

// HasFrom returns a boolean if a field has been set.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) HasFrom() bool {
	if o != nil && o.From.IsSet() {
		return true
	}

	return false
}

// SetFrom gets a reference to the given NullableString and assigns it to the From field.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) SetFrom(v string) {
	o.From.Set(&v)
}
// SetFromNil sets the value for From to be an explicit nil
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) SetFromNil() {
	o.From.Set(nil)
}

// UnsetFrom ensures that no value is present for From, not even an explicit nil
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) UnsetFrom() {
	o.From.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) HasValue() bool {
	if o != nil && IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) SetValue(v interface{}) {
	o.Value = v
}

func (o MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OperationType) {
		toSerialize["operationType"] = o.OperationType
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.Op.IsSet() {
		toSerialize["op"] = o.Op.Get()
	}
	if o.From.IsSet() {
		toSerialize["from"] = o.From.Get()
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F struct {
	value *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F
	isSet bool
}

func (v NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) Get() *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F {
	return v.value
}

func (v *NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) Set(val *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F(val *MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) *NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F {
	return &NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F{value: val, isSet: true}
}

func (v NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


