/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ClientsPhysicalPersonsApiService ClientsPhysicalPersonsApi service
type ClientsPhysicalPersonsApiService service

type ApiApiV4ClientsPhysicalPersonsBlockEmailUseridPutRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	userid int64
}

func (r ApiApiV4ClientsPhysicalPersonsBlockEmailUseridPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsBlockEmailUseridPutExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsBlockEmailUseridPut блокировка емейла пользователя клиента физ лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userid
 @return ApiApiV4ClientsPhysicalPersonsBlockEmailUseridPutRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsBlockEmailUseridPut(ctx context.Context, userid int64) ApiApiV4ClientsPhysicalPersonsBlockEmailUseridPutRequest {
	return ApiApiV4ClientsPhysicalPersonsBlockEmailUseridPutRequest{
		ApiService: a,
		ctx: ctx,
		userid: userid,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsBlockEmailUseridPutExecute(r ApiApiV4ClientsPhysicalPersonsBlockEmailUseridPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsBlockEmailUseridPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons/BlockEmail/{userid}"
	localVarPath = strings.Replace(localVarPath, "{"+"userid"+"}", url.PathEscape(parameterValueToString(r.userid, "userid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsDeleteRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	intraService5SettingsApiModelsEntitiesDeletionModel18E3 *IntraService5SettingsApiModelsEntitiesDeletionModel18E3
}

// модель удаления пользователей
func (r ApiApiV4ClientsPhysicalPersonsDeleteRequest) IntraService5SettingsApiModelsEntitiesDeletionModel18E3(intraService5SettingsApiModelsEntitiesDeletionModel18E3 IntraService5SettingsApiModelsEntitiesDeletionModel18E3) ApiApiV4ClientsPhysicalPersonsDeleteRequest {
	r.intraService5SettingsApiModelsEntitiesDeletionModel18E3 = &intraService5SettingsApiModelsEntitiesDeletionModel18E3
	return r
}

func (r ApiApiV4ClientsPhysicalPersonsDeleteRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsDeleteExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsDelete удаление списка клиентов

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsPhysicalPersonsDeleteRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsDelete(ctx context.Context) ApiApiV4ClientsPhysicalPersonsDeleteRequest {
	return ApiApiV4ClientsPhysicalPersonsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsDeleteExecute(r ApiApiV4ClientsPhysicalPersonsDeleteRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsEntitiesDeletionModel18E3
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsDeleteIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	id int64
}

func (r ApiApiV4ClientsPhysicalPersonsDeleteIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsDeleteIdPutExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsDeleteIdPut удаление одного клиента физ лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsPhysicalPersonsDeleteIdPutRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsDeleteIdPut(ctx context.Context, id int64) ApiApiV4ClientsPhysicalPersonsDeleteIdPutRequest {
	return ApiApiV4ClientsPhysicalPersonsDeleteIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsDeleteIdPutExecute(r ApiApiV4ClientsPhysicalPersonsDeleteIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsDeleteIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons/Delete/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsDeleteUserUseridPutRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	userid int64
}

func (r ApiApiV4ClientsPhysicalPersonsDeleteUserUseridPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsDeleteUserUseridPutExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsDeleteUserUseridPut удаление одного пользователя клиента физ лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userid
 @return ApiApiV4ClientsPhysicalPersonsDeleteUserUseridPutRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsDeleteUserUseridPut(ctx context.Context, userid int64) ApiApiV4ClientsPhysicalPersonsDeleteUserUseridPutRequest {
	return ApiApiV4ClientsPhysicalPersonsDeleteUserUseridPutRequest{
		ApiService: a,
		ctx: ctx,
		userid: userid,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsDeleteUserUseridPutExecute(r ApiApiV4ClientsPhysicalPersonsDeleteUserUseridPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsDeleteUserUseridPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons/DeleteUser/{userid}"
	localVarPath = strings.Replace(localVarPath, "{"+"userid"+"}", url.PathEscape(parameterValueToString(r.userid, "userid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	search *string
	top *int32
	includeArchived *bool
}

func (r ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest) Search(search string) ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest {
	r.search = &search
	return r
}

func (r ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest) Top(top int32) ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest {
	r.top = &top
	return r
}

func (r ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest) IncludeArchived(includeArchived bool) ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest {
	r.includeArchived = &includeArchived
	return r
}

func (r ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest) Execute() ([]IntraService5SettingsApiModelsBaseNamedModel10D7, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsManagersDictionaryGetExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsManagersDictionaryGet Method for ApiV4ClientsPhysicalPersonsManagersDictionaryGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsManagersDictionaryGet(ctx context.Context) ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest {
	return ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IntraService5SettingsApiModelsBaseNamedModel10D7
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsManagersDictionaryGetExecute(r ApiApiV4ClientsPhysicalPersonsManagersDictionaryGetRequest) ([]IntraService5SettingsApiModelsBaseNamedModel10D7, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntraService5SettingsApiModelsBaseNamedModel10D7
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsManagersDictionaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons/ManagersDictionary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "top", r.top, "")
	}
	if r.includeArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeArchived", r.includeArchived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsPatchRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	id *int64
	microsoftAspNetCoreJsonPatchOperationsOperation4C6F *[]MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F
}

// 
func (r ApiApiV4ClientsPhysicalPersonsPatchRequest) Id(id int64) ApiApiV4ClientsPhysicalPersonsPatchRequest {
	r.id = &id
	return r
}

// 
func (r ApiApiV4ClientsPhysicalPersonsPatchRequest) MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F(microsoftAspNetCoreJsonPatchOperationsOperation4C6F []MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) ApiApiV4ClientsPhysicalPersonsPatchRequest {
	r.microsoftAspNetCoreJsonPatchOperationsOperation4C6F = &microsoftAspNetCoreJsonPatchOperationsOperation4C6F
	return r
}

func (r ApiApiV4ClientsPhysicalPersonsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsPatchExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsPatch Патч физ лица (можно найти как по id, так и по contactPersonId)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsPhysicalPersonsPatchRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsPatch(ctx context.Context) ApiApiV4ClientsPhysicalPersonsPatchRequest {
	return ApiApiV4ClientsPhysicalPersonsPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsPatchExecute(r ApiApiV4ClientsPhysicalPersonsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftAspNetCoreJsonPatchOperationsOperation4C6F
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsPostRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	intraService5SettingsApiModelsClientPhysicalPersonModelE777 *IntraService5SettingsApiModelsClientPhysicalPersonModelE777
}

// группа\\компания
func (r ApiApiV4ClientsPhysicalPersonsPostRequest) IntraService5SettingsApiModelsClientPhysicalPersonModelE777(intraService5SettingsApiModelsClientPhysicalPersonModelE777 IntraService5SettingsApiModelsClientPhysicalPersonModelE777) ApiApiV4ClientsPhysicalPersonsPostRequest {
	r.intraService5SettingsApiModelsClientPhysicalPersonModelE777 = &intraService5SettingsApiModelsClientPhysicalPersonModelE777
	return r
}

func (r ApiApiV4ClientsPhysicalPersonsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsPostExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsPost создание клиента физ. лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsPhysicalPersonsPostRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsPost(ctx context.Context) ApiApiV4ClientsPhysicalPersonsPostRequest {
	return ApiApiV4ClientsPhysicalPersonsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsPostExecute(r ApiApiV4ClientsPhysicalPersonsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsClientPhysicalPersonModelE777
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsPutRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	intraService5SettingsApiModelsClientPhysicalPersonModelE777 *IntraService5SettingsApiModelsClientPhysicalPersonModelE777
}

// пользователь
func (r ApiApiV4ClientsPhysicalPersonsPutRequest) IntraService5SettingsApiModelsClientPhysicalPersonModelE777(intraService5SettingsApiModelsClientPhysicalPersonModelE777 IntraService5SettingsApiModelsClientPhysicalPersonModelE777) ApiApiV4ClientsPhysicalPersonsPutRequest {
	r.intraService5SettingsApiModelsClientPhysicalPersonModelE777 = &intraService5SettingsApiModelsClientPhysicalPersonModelE777
	return r
}

func (r ApiApiV4ClientsPhysicalPersonsPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsPutExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsPut Обновление клиента физ. лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsPhysicalPersonsPutRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsPut(ctx context.Context) ApiApiV4ClientsPhysicalPersonsPutRequest {
	return ApiApiV4ClientsPhysicalPersonsPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsPutExecute(r ApiApiV4ClientsPhysicalPersonsPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsClientPhysicalPersonModelE777
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsRestoreIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	id int64
}

func (r ApiApiV4ClientsPhysicalPersonsRestoreIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsRestoreIdPutExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsRestoreIdPut восстановление одного клиента физ лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsPhysicalPersonsRestoreIdPutRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsRestoreIdPut(ctx context.Context, id int64) ApiApiV4ClientsPhysicalPersonsRestoreIdPutRequest {
	return ApiApiV4ClientsPhysicalPersonsRestoreIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsRestoreIdPutExecute(r ApiApiV4ClientsPhysicalPersonsRestoreIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsRestoreIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons/Restore/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsRestoreUserUseridPutRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	userid int64
}

func (r ApiApiV4ClientsPhysicalPersonsRestoreUserUseridPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsRestoreUserUseridPutExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsRestoreUserUseridPut восстановление одного пользователя клиента физ лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userid
 @return ApiApiV4ClientsPhysicalPersonsRestoreUserUseridPutRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsRestoreUserUseridPut(ctx context.Context, userid int64) ApiApiV4ClientsPhysicalPersonsRestoreUserUseridPutRequest {
	return ApiApiV4ClientsPhysicalPersonsRestoreUserUseridPutRequest{
		ApiService: a,
		ctx: ctx,
		userid: userid,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsRestoreUserUseridPutExecute(r ApiApiV4ClientsPhysicalPersonsRestoreUserUseridPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsRestoreUserUseridPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons/RestoreUser/{userid}"
	localVarPath = strings.Replace(localVarPath, "{"+"userid"+"}", url.PathEscape(parameterValueToString(r.userid, "userid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsToLegalEntityIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	id int64
}

func (r ApiApiV4ClientsPhysicalPersonsToLegalEntityIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsToLegalEntityIdPutExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsToLegalEntityIdPut Method for ApiV4ClientsPhysicalPersonsToLegalEntityIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsPhysicalPersonsToLegalEntityIdPutRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsToLegalEntityIdPut(ctx context.Context, id int64) ApiApiV4ClientsPhysicalPersonsToLegalEntityIdPutRequest {
	return ApiApiV4ClientsPhysicalPersonsToLegalEntityIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsToLegalEntityIdPutExecute(r ApiApiV4ClientsPhysicalPersonsToLegalEntityIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsToLegalEntityIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons/ToLegalEntity/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsPhysicalPersonsUnblockEmailUseridPutRequest struct {
	ctx context.Context
	ApiService *ClientsPhysicalPersonsApiService
	userid int64
}

func (r ApiApiV4ClientsPhysicalPersonsUnblockEmailUseridPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsPhysicalPersonsUnblockEmailUseridPutExecute(r)
}

/*
ApiV4ClientsPhysicalPersonsUnblockEmailUseridPut разблокировка емейла пользователя клиента физ лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userid
 @return ApiApiV4ClientsPhysicalPersonsUnblockEmailUseridPutRequest
*/
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsUnblockEmailUseridPut(ctx context.Context, userid int64) ApiApiV4ClientsPhysicalPersonsUnblockEmailUseridPutRequest {
	return ApiApiV4ClientsPhysicalPersonsUnblockEmailUseridPutRequest{
		ApiService: a,
		ctx: ctx,
		userid: userid,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsPhysicalPersonsApiService) ApiV4ClientsPhysicalPersonsUnblockEmailUseridPutExecute(r ApiApiV4ClientsPhysicalPersonsUnblockEmailUseridPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsPhysicalPersonsApiService.ApiV4ClientsPhysicalPersonsUnblockEmailUseridPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/PhysicalPersons/UnblockEmail/{userid}"
	localVarPath = strings.Replace(localVarPath, "{"+"userid"+"}", url.PathEscape(parameterValueToString(r.userid, "userid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
