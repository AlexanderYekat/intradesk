/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IntraService5CommonEnumsErrorTypeC6F4 the model 'IntraService5CommonEnumsErrorTypeC6F4'
type IntraService5CommonEnumsErrorTypeC6F4 int32

// List of IntraService5.Common.Enums.ErrorType_C6F4
const (
	_10 IntraService5CommonEnumsErrorTypeC6F4 = 10
	_20 IntraService5CommonEnumsErrorTypeC6F4 = 20
)

// All allowed values of IntraService5CommonEnumsErrorTypeC6F4 enum
var AllowedIntraService5CommonEnumsErrorTypeC6F4EnumValues = []IntraService5CommonEnumsErrorTypeC6F4{
	10,
	20,
}

func (v *IntraService5CommonEnumsErrorTypeC6F4) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntraService5CommonEnumsErrorTypeC6F4(value)
	for _, existing := range AllowedIntraService5CommonEnumsErrorTypeC6F4EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntraService5CommonEnumsErrorTypeC6F4", value)
}

// NewIntraService5CommonEnumsErrorTypeC6F4FromValue returns a pointer to a valid IntraService5CommonEnumsErrorTypeC6F4
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntraService5CommonEnumsErrorTypeC6F4FromValue(v int32) (*IntraService5CommonEnumsErrorTypeC6F4, error) {
	ev := IntraService5CommonEnumsErrorTypeC6F4(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntraService5CommonEnumsErrorTypeC6F4: valid values are %v", v, AllowedIntraService5CommonEnumsErrorTypeC6F4EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntraService5CommonEnumsErrorTypeC6F4) IsValid() bool {
	for _, existing := range AllowedIntraService5CommonEnumsErrorTypeC6F4EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntraService5.Common.Enums.ErrorType_C6F4 value
func (v IntraService5CommonEnumsErrorTypeC6F4) Ptr() *IntraService5CommonEnumsErrorTypeC6F4 {
	return &v
}

type NullableIntraService5CommonEnumsErrorTypeC6F4 struct {
	value *IntraService5CommonEnumsErrorTypeC6F4
	isSet bool
}

func (v NullableIntraService5CommonEnumsErrorTypeC6F4) Get() *IntraService5CommonEnumsErrorTypeC6F4 {
	return v.value
}

func (v *NullableIntraService5CommonEnumsErrorTypeC6F4) Set(val *IntraService5CommonEnumsErrorTypeC6F4) {
	v.value = val
	v.isSet = true
}

func (v NullableIntraService5CommonEnumsErrorTypeC6F4) IsSet() bool {
	return v.isSet
}

func (v *NullableIntraService5CommonEnumsErrorTypeC6F4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntraService5CommonEnumsErrorTypeC6F4(val *IntraService5CommonEnumsErrorTypeC6F4) *NullableIntraService5CommonEnumsErrorTypeC6F4 {
	return &NullableIntraService5CommonEnumsErrorTypeC6F4{value: val, isSet: true}
}

func (v NullableIntraService5CommonEnumsErrorTypeC6F4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntraService5CommonEnumsErrorTypeC6F4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

