/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ClientsLegalEntitiesUsersApiService ClientsLegalEntitiesUsersApi service
type ClientsLegalEntitiesUsersApiService service

type ApiApiV4ClientsLegalEntitiesUsersBlockEmailIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	id int64
}

func (r ApiApiV4ClientsLegalEntitiesUsersBlockEmailIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersBlockEmailIdPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersBlockEmailIdPut удаление одного пользователя

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsLegalEntitiesUsersBlockEmailIdPutRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersBlockEmailIdPut(ctx context.Context, id int64) ApiApiV4ClientsLegalEntitiesUsersBlockEmailIdPutRequest {
	return ApiApiV4ClientsLegalEntitiesUsersBlockEmailIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersBlockEmailIdPutExecute(r ApiApiV4ClientsLegalEntitiesUsersBlockEmailIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersBlockEmailIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/BlockEmail/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersDeleteRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	intraService5SettingsApiModelsEntitiesDeletionModel18E3 *IntraService5SettingsApiModelsEntitiesDeletionModel18E3
}

// модель удаления пользователей
func (r ApiApiV4ClientsLegalEntitiesUsersDeleteRequest) IntraService5SettingsApiModelsEntitiesDeletionModel18E3(intraService5SettingsApiModelsEntitiesDeletionModel18E3 IntraService5SettingsApiModelsEntitiesDeletionModel18E3) ApiApiV4ClientsLegalEntitiesUsersDeleteRequest {
	r.intraService5SettingsApiModelsEntitiesDeletionModel18E3 = &intraService5SettingsApiModelsEntitiesDeletionModel18E3
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersDeleteRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersDeleteExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersDelete удаление списка пользователей

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesUsersDeleteRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersDelete(ctx context.Context) ApiApiV4ClientsLegalEntitiesUsersDeleteRequest {
	return ApiApiV4ClientsLegalEntitiesUsersDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersDeleteExecute(r ApiApiV4ClientsLegalEntitiesUsersDeleteRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsEntitiesDeletionModel18E3
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersDeleteIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	id int64
}

func (r ApiApiV4ClientsLegalEntitiesUsersDeleteIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersDeleteIdPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersDeleteIdPut удаление одного пользователя

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsLegalEntitiesUsersDeleteIdPutRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersDeleteIdPut(ctx context.Context, id int64) ApiApiV4ClientsLegalEntitiesUsersDeleteIdPutRequest {
	return ApiApiV4ClientsLegalEntitiesUsersDeleteIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersDeleteIdPutExecute(r ApiApiV4ClientsLegalEntitiesUsersDeleteIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersDeleteIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/Delete/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersMergePutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	intraService5SettingsApiModelsClientsMergeClientUsersModelF151 *IntraService5SettingsApiModelsClientsMergeClientUsersModelF151
}

// 
func (r ApiApiV4ClientsLegalEntitiesUsersMergePutRequest) IntraService5SettingsApiModelsClientsMergeClientUsersModelF151(intraService5SettingsApiModelsClientsMergeClientUsersModelF151 IntraService5SettingsApiModelsClientsMergeClientUsersModelF151) ApiApiV4ClientsLegalEntitiesUsersMergePutRequest {
	r.intraService5SettingsApiModelsClientsMergeClientUsersModelF151 = &intraService5SettingsApiModelsClientsMergeClientUsersModelF151
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersMergePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersMergePutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersMergePut объединение пользователей юр лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesUsersMergePutRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersMergePut(ctx context.Context) ApiApiV4ClientsLegalEntitiesUsersMergePutRequest {
	return ApiApiV4ClientsLegalEntitiesUsersMergePutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersMergePutExecute(r ApiApiV4ClientsLegalEntitiesUsersMergePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersMergePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/Merge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsClientsMergeClientUsersModelF151
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersPatchRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	id *int64
	microsoftAspNetCoreJsonPatchOperationsOperation4C6F *[]MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F
}

func (r ApiApiV4ClientsLegalEntitiesUsersPatchRequest) Id(id int64) ApiApiV4ClientsLegalEntitiesUsersPatchRequest {
	r.id = &id
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersPatchRequest) MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F(microsoftAspNetCoreJsonPatchOperationsOperation4C6F []MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) ApiApiV4ClientsLegalEntitiesUsersPatchRequest {
	r.microsoftAspNetCoreJsonPatchOperationsOperation4C6F = &microsoftAspNetCoreJsonPatchOperationsOperation4C6F
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersPatchExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersPatch Method for ApiV4ClientsLegalEntitiesUsersPatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesUsersPatchRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersPatch(ctx context.Context) ApiApiV4ClientsLegalEntitiesUsersPatchRequest {
	return ApiApiV4ClientsLegalEntitiesUsersPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersPatchExecute(r ApiApiV4ClientsLegalEntitiesUsersPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftAspNetCoreJsonPatchOperationsOperation4C6F
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersPostRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	intraService5SettingsApiModelsClientUserModel38EA *IntraService5SettingsApiModelsClientUserModel38EA
}

// пользователь
func (r ApiApiV4ClientsLegalEntitiesUsersPostRequest) IntraService5SettingsApiModelsClientUserModel38EA(intraService5SettingsApiModelsClientUserModel38EA IntraService5SettingsApiModelsClientUserModel38EA) ApiApiV4ClientsLegalEntitiesUsersPostRequest {
	r.intraService5SettingsApiModelsClientUserModel38EA = &intraService5SettingsApiModelsClientUserModel38EA
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersPostExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersPost Создание пользователя

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesUsersPostRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersPost(ctx context.Context) ApiApiV4ClientsLegalEntitiesUsersPostRequest {
	return ApiApiV4ClientsLegalEntitiesUsersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersPostExecute(r ApiApiV4ClientsLegalEntitiesUsersPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsClientUserModel38EA
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	intraService5SettingsApiModelsClientUserModel38EA *IntraService5SettingsApiModelsClientUserModel38EA
}

// пользователь
func (r ApiApiV4ClientsLegalEntitiesUsersPutRequest) IntraService5SettingsApiModelsClientUserModel38EA(intraService5SettingsApiModelsClientUserModel38EA IntraService5SettingsApiModelsClientUserModel38EA) ApiApiV4ClientsLegalEntitiesUsersPutRequest {
	r.intraService5SettingsApiModelsClientUserModel38EA = &intraService5SettingsApiModelsClientUserModel38EA
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersPut Обновление пользователя клиента

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesUsersPutRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersPut(ctx context.Context) ApiApiV4ClientsLegalEntitiesUsersPutRequest {
	return ApiApiV4ClientsLegalEntitiesUsersPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersPutExecute(r ApiApiV4ClientsLegalEntitiesUsersPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsClientUserModel38EA
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersRestoreIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	id int64
}

func (r ApiApiV4ClientsLegalEntitiesUsersRestoreIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersRestoreIdPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersRestoreIdPut восстановление одного пользователя

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsLegalEntitiesUsersRestoreIdPutRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersRestoreIdPut(ctx context.Context, id int64) ApiApiV4ClientsLegalEntitiesUsersRestoreIdPutRequest {
	return ApiApiV4ClientsLegalEntitiesUsersRestoreIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersRestoreIdPutExecute(r ApiApiV4ClientsLegalEntitiesUsersRestoreIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersRestoreIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/Restore/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersRoleHintsGetRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	searchString *string
}

// 
func (r ApiApiV4ClientsLegalEntitiesUsersRoleHintsGetRequest) SearchString(searchString string) ApiApiV4ClientsLegalEntitiesUsersRoleHintsGetRequest {
	r.searchString = &searchString
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersRoleHintsGetRequest) Execute() ([]IntraService5SettingsApiModelsFilterHintModelECE3, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersRoleHintsGetExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersRoleHintsGet Поиск ролей с определенным типом. Используется на форме фильтра для пользователей клиентов и сотрудников. Не используется контроллер ролей, так как не хватает прав доступа для общих разделов клиента.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesUsersRoleHintsGetRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersRoleHintsGet(ctx context.Context) ApiApiV4ClientsLegalEntitiesUsersRoleHintsGetRequest {
	return ApiApiV4ClientsLegalEntitiesUsersRoleHintsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IntraService5SettingsApiModelsFilterHintModelECE3
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersRoleHintsGetExecute(r ApiApiV4ClientsLegalEntitiesUsersRoleHintsGetRequest) ([]IntraService5SettingsApiModelsFilterHintModelECE3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntraService5SettingsApiModelsFilterHintModelECE3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersRoleHintsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/RoleHints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.searchString != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchString", r.searchString, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	searchString *string
	top *int32
	excludedids *[]int64
}

// 
func (r ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest) SearchString(searchString string) ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest {
	r.searchString = &searchString
	return r
}

// 
func (r ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest) Top(top int32) ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest {
	r.top = &top
	return r
}

// 
func (r ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest) Excludedids(excludedids []int64) ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest {
	r.excludedids = &excludedids
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest) Execute() ([]IntraService5SettingsApiModelsSearchHintsModel3054, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersSearchHintsGetExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersSearchHintsGet поиск пользователей клиентов

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersSearchHintsGet(ctx context.Context) ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest {
	return ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IntraService5SettingsApiModelsSearchHintsModel3054
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersSearchHintsGetExecute(r ApiApiV4ClientsLegalEntitiesUsersSearchHintsGetRequest) ([]IntraService5SettingsApiModelsSearchHintsModel3054, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntraService5SettingsApiModelsSearchHintsModel3054
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersSearchHintsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/SearchHints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.searchString != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchString", r.searchString, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "top", r.top, "")
	}
	if r.excludedids != nil {
		t := *r.excludedids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedids", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludedids", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersToEmployeePutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	intraService5SettingsApiModelsClientUserToEmployeeModel1D42 *IntraService5SettingsApiModelsClientUserToEmployeeModel1D42
}

// 
func (r ApiApiV4ClientsLegalEntitiesUsersToEmployeePutRequest) IntraService5SettingsApiModelsClientUserToEmployeeModel1D42(intraService5SettingsApiModelsClientUserToEmployeeModel1D42 IntraService5SettingsApiModelsClientUserToEmployeeModel1D42) ApiApiV4ClientsLegalEntitiesUsersToEmployeePutRequest {
	r.intraService5SettingsApiModelsClientUserToEmployeeModel1D42 = &intraService5SettingsApiModelsClientUserToEmployeeModel1D42
	return r
}

func (r ApiApiV4ClientsLegalEntitiesUsersToEmployeePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersToEmployeePutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersToEmployeePut перевод пользователя клиента в сотрудника

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesUsersToEmployeePutRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersToEmployeePut(ctx context.Context) ApiApiV4ClientsLegalEntitiesUsersToEmployeePutRequest {
	return ApiApiV4ClientsLegalEntitiesUsersToEmployeePutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersToEmployeePutExecute(r ApiApiV4ClientsLegalEntitiesUsersToEmployeePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersToEmployeePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/ToEmployee"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsClientUserToEmployeeModel1D42
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersUnblockEmailIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	id int64
}

func (r ApiApiV4ClientsLegalEntitiesUsersUnblockEmailIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersUnblockEmailIdPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersUnblockEmailIdPut восстановление одного пользователя

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsLegalEntitiesUsersUnblockEmailIdPutRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersUnblockEmailIdPut(ctx context.Context, id int64) ApiApiV4ClientsLegalEntitiesUsersUnblockEmailIdPutRequest {
	return ApiApiV4ClientsLegalEntitiesUsersUnblockEmailIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersUnblockEmailIdPutExecute(r ApiApiV4ClientsLegalEntitiesUsersUnblockEmailIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersUnblockEmailIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/UnblockEmail/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGetRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	userId int64
}

func (r ApiApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGetRequest) Execute() ([]IntraService5SettingsApiModelsUserDeviceDto4EDC, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGetExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGet получить устройства пользователя (тип и токен)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId идентификатор пользователя
 @return ApiApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGetRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGet(ctx context.Context, userId int64) ApiApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGetRequest {
	return ApiApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGetRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []IntraService5SettingsApiModelsUserDeviceDto4EDC
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGetExecute(r ApiApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGetRequest) ([]IntraService5SettingsApiModelsUserDeviceDto4EDC, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntraService5SettingsApiModelsUserDeviceDto4EDC
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersUserDevicesUserIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/UserDevices/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGetRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesUsersApiService
	id int64
}

func (r ApiApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGetRequest) Execute() (*IntraService5SettingsApiModelsUserPhotosB2B1, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGetExecute(r)
}

/*
ApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGet получение фото пользователя

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id идентификатор пользователя
 @return ApiApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGetRequest
*/
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGet(ctx context.Context, id int64) ApiApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGetRequest {
	return ApiApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiModelsUserPhotosB2B1
func (a *ClientsLegalEntitiesUsersApiService) ApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGetExecute(r ApiApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGetRequest) (*IntraService5SettingsApiModelsUserPhotosB2B1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiModelsUserPhotosB2B1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesUsersApiService.ApiV4ClientsLegalEntitiesUsersViewUserPhotoIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Users/ViewUserPhoto/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
