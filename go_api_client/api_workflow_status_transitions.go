/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// WorkflowStatusTransitionsApiService WorkflowStatusTransitionsApi service
type WorkflowStatusTransitionsApiService service

type ApiOdataV4WorkflowStatusTransitionsGetRequest struct {
	ctx context.Context
	ApiService *WorkflowStatusTransitionsApiService
	select_ *string
	expand *string
	filter *string
	orderby *string
	count *bool
}

func (r ApiOdataV4WorkflowStatusTransitionsGetRequest) Select_(select_ string) ApiOdataV4WorkflowStatusTransitionsGetRequest {
	r.select_ = &select_
	return r
}

func (r ApiOdataV4WorkflowStatusTransitionsGetRequest) Expand(expand string) ApiOdataV4WorkflowStatusTransitionsGetRequest {
	r.expand = &expand
	return r
}

func (r ApiOdataV4WorkflowStatusTransitionsGetRequest) Filter(filter string) ApiOdataV4WorkflowStatusTransitionsGetRequest {
	r.filter = &filter
	return r
}

func (r ApiOdataV4WorkflowStatusTransitionsGetRequest) Orderby(orderby string) ApiOdataV4WorkflowStatusTransitionsGetRequest {
	r.orderby = &orderby
	return r
}

func (r ApiOdataV4WorkflowStatusTransitionsGetRequest) Count(count bool) ApiOdataV4WorkflowStatusTransitionsGetRequest {
	r.count = &count
	return r
}

func (r ApiOdataV4WorkflowStatusTransitionsGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.OdataV4WorkflowStatusTransitionsGetExecute(r)
}

/*
OdataV4WorkflowStatusTransitionsGet Method for OdataV4WorkflowStatusTransitionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOdataV4WorkflowStatusTransitionsGetRequest
*/
func (a *WorkflowStatusTransitionsApiService) OdataV4WorkflowStatusTransitionsGet(ctx context.Context) ApiOdataV4WorkflowStatusTransitionsGetRequest {
	return ApiOdataV4WorkflowStatusTransitionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WorkflowStatusTransitionsApiService) OdataV4WorkflowStatusTransitionsGetExecute(r ApiOdataV4WorkflowStatusTransitionsGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowStatusTransitionsApiService.OdataV4WorkflowStatusTransitionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/odata/v4/WorkflowStatusTransitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$select", r.select_, "")
	}
	if r.expand != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$expand", r.expand, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$filter", r.filter, "")
	}
	if r.orderby != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$orderby", r.orderby, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "$count", r.count, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
