/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IntraService5SharedEnumsInitClientUserChannel342B the model 'IntraService5SharedEnumsInitClientUserChannel342B'
type IntraService5SharedEnumsInitClientUserChannel342B int32

// List of IntraService5.Shared.Enums.InitClientUserChannel_342B
const (
	_0 IntraService5SharedEnumsInitClientUserChannel342B = 0
	_10 IntraService5SharedEnumsInitClientUserChannel342B = 10
	_20 IntraService5SharedEnumsInitClientUserChannel342B = 20
	_30 IntraService5SharedEnumsInitClientUserChannel342B = 30
	_40 IntraService5SharedEnumsInitClientUserChannel342B = 40
	_50 IntraService5SharedEnumsInitClientUserChannel342B = 50
	_60 IntraService5SharedEnumsInitClientUserChannel342B = 60
)

// All allowed values of IntraService5SharedEnumsInitClientUserChannel342B enum
var AllowedIntraService5SharedEnumsInitClientUserChannel342BEnumValues = []IntraService5SharedEnumsInitClientUserChannel342B{
	0,
	10,
	20,
	30,
	40,
	50,
	60,
}

func (v *IntraService5SharedEnumsInitClientUserChannel342B) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntraService5SharedEnumsInitClientUserChannel342B(value)
	for _, existing := range AllowedIntraService5SharedEnumsInitClientUserChannel342BEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntraService5SharedEnumsInitClientUserChannel342B", value)
}

// NewIntraService5SharedEnumsInitClientUserChannel342BFromValue returns a pointer to a valid IntraService5SharedEnumsInitClientUserChannel342B
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntraService5SharedEnumsInitClientUserChannel342BFromValue(v int32) (*IntraService5SharedEnumsInitClientUserChannel342B, error) {
	ev := IntraService5SharedEnumsInitClientUserChannel342B(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntraService5SharedEnumsInitClientUserChannel342B: valid values are %v", v, AllowedIntraService5SharedEnumsInitClientUserChannel342BEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntraService5SharedEnumsInitClientUserChannel342B) IsValid() bool {
	for _, existing := range AllowedIntraService5SharedEnumsInitClientUserChannel342BEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntraService5.Shared.Enums.InitClientUserChannel_342B value
func (v IntraService5SharedEnumsInitClientUserChannel342B) Ptr() *IntraService5SharedEnumsInitClientUserChannel342B {
	return &v
}

type NullableIntraService5SharedEnumsInitClientUserChannel342B struct {
	value *IntraService5SharedEnumsInitClientUserChannel342B
	isSet bool
}

func (v NullableIntraService5SharedEnumsInitClientUserChannel342B) Get() *IntraService5SharedEnumsInitClientUserChannel342B {
	return v.value
}

func (v *NullableIntraService5SharedEnumsInitClientUserChannel342B) Set(val *IntraService5SharedEnumsInitClientUserChannel342B) {
	v.value = val
	v.isSet = true
}

func (v NullableIntraService5SharedEnumsInitClientUserChannel342B) IsSet() bool {
	return v.isSet
}

func (v *NullableIntraService5SharedEnumsInitClientUserChannel342B) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntraService5SharedEnumsInitClientUserChannel342B(val *IntraService5SharedEnumsInitClientUserChannel342B) *NullableIntraService5SharedEnumsInitClientUserChannel342B {
	return &NullableIntraService5SharedEnumsInitClientUserChannel342B{value: val, isSet: true}
}

func (v NullableIntraService5SharedEnumsInitClientUserChannel342B) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntraService5SharedEnumsInitClientUserChannel342B) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

