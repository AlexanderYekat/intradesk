/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ClientsLegalEntitiesApiService ClientsLegalEntitiesApi service
type ClientsLegalEntitiesApiService service

type ApiApiV4ClientsLegalEntitiesDeleteRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	intraService5SettingsApiModelsEntitiesDeletionModel18E3 *IntraService5SettingsApiModelsEntitiesDeletionModel18E3
}

// модель удаления пользователей
func (r ApiApiV4ClientsLegalEntitiesDeleteRequest) IntraService5SettingsApiModelsEntitiesDeletionModel18E3(intraService5SettingsApiModelsEntitiesDeletionModel18E3 IntraService5SettingsApiModelsEntitiesDeletionModel18E3) ApiApiV4ClientsLegalEntitiesDeleteRequest {
	r.intraService5SettingsApiModelsEntitiesDeletionModel18E3 = &intraService5SettingsApiModelsEntitiesDeletionModel18E3
	return r
}

func (r ApiApiV4ClientsLegalEntitiesDeleteRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesDeleteExecute(r)
}

/*
ApiV4ClientsLegalEntitiesDelete удаление списка клиентов

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesDeleteRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesDelete(ctx context.Context) ApiApiV4ClientsLegalEntitiesDeleteRequest {
	return ApiApiV4ClientsLegalEntitiesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesDeleteExecute(r ApiApiV4ClientsLegalEntitiesDeleteRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsEntitiesDeletionModel18E3
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesDeleteIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	id int64
}

func (r ApiApiV4ClientsLegalEntitiesDeleteIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesDeleteIdPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesDeleteIdPut удаление одного клиента

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsLegalEntitiesDeleteIdPutRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesDeleteIdPut(ctx context.Context, id int64) ApiApiV4ClientsLegalEntitiesDeleteIdPutRequest {
	return ApiApiV4ClientsLegalEntitiesDeleteIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesDeleteIdPutExecute(r ApiApiV4ClientsLegalEntitiesDeleteIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesDeleteIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Delete/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	search *string
	top *int32
	includeArchived *bool
	excludedids *[]int64
}

func (r ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest) Search(search string) ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest {
	r.search = &search
	return r
}

func (r ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest) Top(top int32) ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest {
	r.top = &top
	return r
}

func (r ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest) IncludeArchived(includeArchived bool) ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest {
	r.includeArchived = &includeArchived
	return r
}

func (r ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest) Excludedids(excludedids []int64) ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest {
	r.excludedids = &excludedids
	return r
}

func (r ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest) Execute() ([]IntraService5SettingsApiModelsBaseNamedModel10D7, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesGroupsDictionaryGetExecute(r)
}

/*
ApiV4ClientsLegalEntitiesGroupsDictionaryGet Method for ApiV4ClientsLegalEntitiesGroupsDictionaryGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesGroupsDictionaryGet(ctx context.Context) ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest {
	return ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IntraService5SettingsApiModelsBaseNamedModel10D7
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesGroupsDictionaryGetExecute(r ApiApiV4ClientsLegalEntitiesGroupsDictionaryGetRequest) ([]IntraService5SettingsApiModelsBaseNamedModel10D7, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntraService5SettingsApiModelsBaseNamedModel10D7
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesGroupsDictionaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/GroupsDictionary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "top", r.top, "")
	}
	if r.includeArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeArchived", r.includeArchived, "")
	}
	if r.excludedids != nil {
		t := *r.excludedids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedids", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludedids", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesImportCheckPostRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060 *[]IntraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060
}

func (r ApiApiV4ClientsLegalEntitiesImportCheckPostRequest) IntraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060(intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060 []IntraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060) ApiApiV4ClientsLegalEntitiesImportCheckPostRequest {
	r.intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060 = &intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060
	return r
}

func (r ApiApiV4ClientsLegalEntitiesImportCheckPostRequest) Execute() (*IntraService5SettingsApiModelsUsersAndGroupsExcelImportModelCheckResultB134, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesImportCheckPostExecute(r)
}

/*
ApiV4ClientsLegalEntitiesImportCheckPost Method for ApiV4ClientsLegalEntitiesImportCheckPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesImportCheckPostRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesImportCheckPost(ctx context.Context) ApiApiV4ClientsLegalEntitiesImportCheckPostRequest {
	return ApiApiV4ClientsLegalEntitiesImportCheckPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiModelsUsersAndGroupsExcelImportModelCheckResultB134
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesImportCheckPostExecute(r ApiApiV4ClientsLegalEntitiesImportCheckPostRequest) (*IntraService5SettingsApiModelsUsersAndGroupsExcelImportModelCheckResultB134, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiModelsUsersAndGroupsExcelImportModelCheckResultB134
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesImportCheckPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/ImportCheck"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesImportPostRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060 *[]IntraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060
}

func (r ApiApiV4ClientsLegalEntitiesImportPostRequest) IntraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060(intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060 []IntraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060) ApiApiV4ClientsLegalEntitiesImportPostRequest {
	r.intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060 = &intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060
	return r
}

func (r ApiApiV4ClientsLegalEntitiesImportPostRequest) Execute() ([]IntraService5SettingsApiModelsUsersAndGroupsExcelImportModelImportResult6AC0, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesImportPostExecute(r)
}

/*
ApiV4ClientsLegalEntitiesImportPost Method for ApiV4ClientsLegalEntitiesImportPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesImportPostRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesImportPost(ctx context.Context) ApiApiV4ClientsLegalEntitiesImportPostRequest {
	return ApiApiV4ClientsLegalEntitiesImportPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IntraService5SettingsApiModelsUsersAndGroupsExcelImportModelImportResult6AC0
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesImportPostExecute(r ApiApiV4ClientsLegalEntitiesImportPostRequest) ([]IntraService5SettingsApiModelsUsersAndGroupsExcelImportModelImportResult6AC0, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntraService5SettingsApiModelsUsersAndGroupsExcelImportModelImportResult6AC0
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesImportPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsUsersAndGroupsExcelImportModel0060
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	search *string
	top *int32
	includeArchived *bool
}

func (r ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest) Search(search string) ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest {
	r.search = &search
	return r
}

func (r ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest) Top(top int32) ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest {
	r.top = &top
	return r
}

func (r ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest) IncludeArchived(includeArchived bool) ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest {
	r.includeArchived = &includeArchived
	return r
}

func (r ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest) Execute() ([]IntraService5SettingsApiModelsBaseNamedModel10D7, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesManagersDictionaryGetExecute(r)
}

/*
ApiV4ClientsLegalEntitiesManagersDictionaryGet Method for ApiV4ClientsLegalEntitiesManagersDictionaryGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesManagersDictionaryGet(ctx context.Context) ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest {
	return ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IntraService5SettingsApiModelsBaseNamedModel10D7
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesManagersDictionaryGetExecute(r ApiApiV4ClientsLegalEntitiesManagersDictionaryGetRequest) ([]IntraService5SettingsApiModelsBaseNamedModel10D7, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntraService5SettingsApiModelsBaseNamedModel10D7
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesManagersDictionaryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/ManagersDictionary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "top", r.top, "")
	}
	if r.includeArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeArchived", r.includeArchived, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesPatchRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	id *int64
	microsoftAspNetCoreJsonPatchOperationsOperation4C6F *[]MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F
}

func (r ApiApiV4ClientsLegalEntitiesPatchRequest) Id(id int64) ApiApiV4ClientsLegalEntitiesPatchRequest {
	r.id = &id
	return r
}

func (r ApiApiV4ClientsLegalEntitiesPatchRequest) MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F(microsoftAspNetCoreJsonPatchOperationsOperation4C6F []MicrosoftAspNetCoreJsonPatchOperationsOperation4C6F) ApiApiV4ClientsLegalEntitiesPatchRequest {
	r.microsoftAspNetCoreJsonPatchOperationsOperation4C6F = &microsoftAspNetCoreJsonPatchOperationsOperation4C6F
	return r
}

func (r ApiApiV4ClientsLegalEntitiesPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesPatchExecute(r)
}

/*
ApiV4ClientsLegalEntitiesPatch Method for ApiV4ClientsLegalEntitiesPatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesPatchRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesPatch(ctx context.Context) ApiApiV4ClientsLegalEntitiesPatchRequest {
	return ApiApiV4ClientsLegalEntitiesPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesPatchExecute(r ApiApiV4ClientsLegalEntitiesPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftAspNetCoreJsonPatchOperationsOperation4C6F
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesPostRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	intraService5SettingsApiModelsClientLegalEntityCreateModel8A9F *IntraService5SettingsApiModelsClientLegalEntityCreateModel8A9F
}

// группа\\компания
func (r ApiApiV4ClientsLegalEntitiesPostRequest) IntraService5SettingsApiModelsClientLegalEntityCreateModel8A9F(intraService5SettingsApiModelsClientLegalEntityCreateModel8A9F IntraService5SettingsApiModelsClientLegalEntityCreateModel8A9F) ApiApiV4ClientsLegalEntitiesPostRequest {
	r.intraService5SettingsApiModelsClientLegalEntityCreateModel8A9F = &intraService5SettingsApiModelsClientLegalEntityCreateModel8A9F
	return r
}

func (r ApiApiV4ClientsLegalEntitiesPostRequest) Execute() (int64, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesPostExecute(r)
}

/*
ApiV4ClientsLegalEntitiesPost создание клиента юр. лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesPostRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesPost(ctx context.Context) ApiApiV4ClientsLegalEntitiesPostRequest {
	return ApiApiV4ClientsLegalEntitiesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return int64
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesPostExecute(r ApiApiV4ClientsLegalEntitiesPostRequest) (int64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  int64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsClientLegalEntityCreateModel8A9F
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	intraService5SettingsApiModelsClientLegalEntityModel62ED *IntraService5SettingsApiModelsClientLegalEntityModel62ED
}

// пользователь
func (r ApiApiV4ClientsLegalEntitiesPutRequest) IntraService5SettingsApiModelsClientLegalEntityModel62ED(intraService5SettingsApiModelsClientLegalEntityModel62ED IntraService5SettingsApiModelsClientLegalEntityModel62ED) ApiApiV4ClientsLegalEntitiesPutRequest {
	r.intraService5SettingsApiModelsClientLegalEntityModel62ED = &intraService5SettingsApiModelsClientLegalEntityModel62ED
	return r
}

func (r ApiApiV4ClientsLegalEntitiesPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesPut Обновление клиента юр. лица

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesPutRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesPut(ctx context.Context) ApiApiV4ClientsLegalEntitiesPutRequest {
	return ApiApiV4ClientsLegalEntitiesPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesPutExecute(r ApiApiV4ClientsLegalEntitiesPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsClientLegalEntityModel62ED
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesRestoreIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	id int64
}

func (r ApiApiV4ClientsLegalEntitiesRestoreIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesRestoreIdPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesRestoreIdPut восстановление одного клиента

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsLegalEntitiesRestoreIdPutRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesRestoreIdPut(ctx context.Context, id int64) ApiApiV4ClientsLegalEntitiesRestoreIdPutRequest {
	return ApiApiV4ClientsLegalEntitiesRestoreIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesRestoreIdPutExecute(r ApiApiV4ClientsLegalEntitiesRestoreIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesRestoreIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/Restore/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	searchString *string
	top *int32
	excludedids *[]int64
}

func (r ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest) SearchString(searchString string) ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest {
	r.searchString = &searchString
	return r
}

func (r ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest) Top(top int32) ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest {
	r.top = &top
	return r
}

func (r ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest) Excludedids(excludedids []int64) ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest {
	r.excludedids = &excludedids
	return r
}

func (r ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest) Execute() ([]IntraService5SettingsApiModelsSearchHintsModel3054, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesSearchHintsGetExecute(r)
}

/*
ApiV4ClientsLegalEntitiesSearchHintsGet Method for ApiV4ClientsLegalEntitiesSearchHintsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesSearchHintsGet(ctx context.Context) ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest {
	return ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IntraService5SettingsApiModelsSearchHintsModel3054
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesSearchHintsGetExecute(r ApiApiV4ClientsLegalEntitiesSearchHintsGetRequest) ([]IntraService5SettingsApiModelsSearchHintsModel3054, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntraService5SettingsApiModelsSearchHintsModel3054
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesSearchHintsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/SearchHints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.searchString != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "searchString", r.searchString, "")
	}
	if r.top != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "top", r.top, "")
	}
	if r.excludedids != nil {
		t := *r.excludedids
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "excludedids", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "excludedids", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV4ClientsLegalEntitiesToPhysicalPersonIdPutRequest struct {
	ctx context.Context
	ApiService *ClientsLegalEntitiesApiService
	id int64
}

func (r ApiApiV4ClientsLegalEntitiesToPhysicalPersonIdPutRequest) Execute() (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	return r.ApiService.ApiV4ClientsLegalEntitiesToPhysicalPersonIdPutExecute(r)
}

/*
ApiV4ClientsLegalEntitiesToPhysicalPersonIdPut Method for ApiV4ClientsLegalEntitiesToPhysicalPersonIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV4ClientsLegalEntitiesToPhysicalPersonIdPutRequest
*/
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesToPhysicalPersonIdPut(ctx context.Context, id int64) ApiApiV4ClientsLegalEntitiesToPhysicalPersonIdPutRequest {
	return ApiApiV4ClientsLegalEntitiesToPhysicalPersonIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiCommandsBaseCommandResult2D4E
func (a *ClientsLegalEntitiesApiService) ApiV4ClientsLegalEntitiesToPhysicalPersonIdPutExecute(r ApiApiV4ClientsLegalEntitiesToPhysicalPersonIdPutRequest) (*IntraService5SettingsApiCommandsBaseCommandResult2D4E, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiCommandsBaseCommandResult2D4E
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsLegalEntitiesApiService.ApiV4ClientsLegalEntitiesToPhysicalPersonIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/LegalEntities/ToPhysicalPerson/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
