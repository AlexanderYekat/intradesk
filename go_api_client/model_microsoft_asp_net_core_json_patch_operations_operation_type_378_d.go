/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftAspNetCoreJsonPatchOperationsOperationType378D the model 'MicrosoftAspNetCoreJsonPatchOperationsOperationType378D'
type MicrosoftAspNetCoreJsonPatchOperationsOperationType378D int32

// List of Microsoft.AspNetCore.JsonPatch.Operations.OperationType_378D
const (
	_0 MicrosoftAspNetCoreJsonPatchOperationsOperationType378D = 0
	_1 MicrosoftAspNetCoreJsonPatchOperationsOperationType378D = 1
	_2 MicrosoftAspNetCoreJsonPatchOperationsOperationType378D = 2
	_3 MicrosoftAspNetCoreJsonPatchOperationsOperationType378D = 3
	_4 MicrosoftAspNetCoreJsonPatchOperationsOperationType378D = 4
	_5 MicrosoftAspNetCoreJsonPatchOperationsOperationType378D = 5
	_6 MicrosoftAspNetCoreJsonPatchOperationsOperationType378D = 6
)

// All allowed values of MicrosoftAspNetCoreJsonPatchOperationsOperationType378D enum
var AllowedMicrosoftAspNetCoreJsonPatchOperationsOperationType378DEnumValues = []MicrosoftAspNetCoreJsonPatchOperationsOperationType378D{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
}

func (v *MicrosoftAspNetCoreJsonPatchOperationsOperationType378D) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftAspNetCoreJsonPatchOperationsOperationType378D(value)
	for _, existing := range AllowedMicrosoftAspNetCoreJsonPatchOperationsOperationType378DEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftAspNetCoreJsonPatchOperationsOperationType378D", value)
}

// NewMicrosoftAspNetCoreJsonPatchOperationsOperationType378DFromValue returns a pointer to a valid MicrosoftAspNetCoreJsonPatchOperationsOperationType378D
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftAspNetCoreJsonPatchOperationsOperationType378DFromValue(v int32) (*MicrosoftAspNetCoreJsonPatchOperationsOperationType378D, error) {
	ev := MicrosoftAspNetCoreJsonPatchOperationsOperationType378D(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftAspNetCoreJsonPatchOperationsOperationType378D: valid values are %v", v, AllowedMicrosoftAspNetCoreJsonPatchOperationsOperationType378DEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftAspNetCoreJsonPatchOperationsOperationType378D) IsValid() bool {
	for _, existing := range AllowedMicrosoftAspNetCoreJsonPatchOperationsOperationType378DEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Microsoft.AspNetCore.JsonPatch.Operations.OperationType_378D value
func (v MicrosoftAspNetCoreJsonPatchOperationsOperationType378D) Ptr() *MicrosoftAspNetCoreJsonPatchOperationsOperationType378D {
	return &v
}

type NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D struct {
	value *MicrosoftAspNetCoreJsonPatchOperationsOperationType378D
	isSet bool
}

func (v NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D) Get() *MicrosoftAspNetCoreJsonPatchOperationsOperationType378D {
	return v.value
}

func (v *NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D) Set(val *MicrosoftAspNetCoreJsonPatchOperationsOperationType378D) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D(val *MicrosoftAspNetCoreJsonPatchOperationsOperationType378D) *NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D {
	return &NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D{value: val, isSet: true}
}

func (v NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftAspNetCoreJsonPatchOperationsOperationType378D) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

