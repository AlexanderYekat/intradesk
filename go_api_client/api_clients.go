/*
Settings API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ClientsApiService ClientsApi service
type ClientsApiService service

type ApiApiV4ClientsInitUsersPutRequest struct {
	ctx context.Context
	ApiService *ClientsApiService
	intraService5SettingsApiModelsInitClientUserInputModelE478 *IntraService5SettingsApiModelsInitClientUserInputModelE478
}

func (r ApiApiV4ClientsInitUsersPutRequest) IntraService5SettingsApiModelsInitClientUserInputModelE478(intraService5SettingsApiModelsInitClientUserInputModelE478 IntraService5SettingsApiModelsInitClientUserInputModelE478) ApiApiV4ClientsInitUsersPutRequest {
	r.intraService5SettingsApiModelsInitClientUserInputModelE478 = &intraService5SettingsApiModelsInitClientUserInputModelE478
	return r
}

func (r ApiApiV4ClientsInitUsersPutRequest) Execute() (*IntraService5SettingsApiModelsInitClientUserOutputModel5E23, *http.Response, error) {
	return r.ApiService.ApiV4ClientsInitUsersPutExecute(r)
}

/*
ApiV4ClientsInitUsersPut Method for ApiV4ClientsInitUsersPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV4ClientsInitUsersPutRequest
*/
func (a *ClientsApiService) ApiV4ClientsInitUsersPut(ctx context.Context) ApiApiV4ClientsInitUsersPutRequest {
	return ApiApiV4ClientsInitUsersPutRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IntraService5SettingsApiModelsInitClientUserOutputModel5E23
func (a *ClientsApiService) ApiV4ClientsInitUsersPutExecute(r ApiApiV4ClientsInitUsersPutRequest) (*IntraService5SettingsApiModelsInitClientUserOutputModel5E23, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntraService5SettingsApiModelsInitClientUserOutputModel5E23
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClientsApiService.ApiV4ClientsInitUsersPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v4/clients/InitUsers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "application/json-patch+json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/prs.odatatestxx-odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.intraService5SettingsApiModelsInitClientUserInputModelE478
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
